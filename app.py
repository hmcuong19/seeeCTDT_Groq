import streamlit as st
import io
import docx
import fitz  # PyMuPDF
import openai
from openai import OpenAI
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import Paragraph, SimpleDocTemplate, Spacer
from reportlab.lib.enums import TA_CENTER
import tempfile

# --- C·∫•u h√¨nh ---
st.set_page_config(page_title="Tr√≠ch xu·∫•t Th√¥ng tin Th√¥ng minh", page_icon="‚ú®", layout="wide")

# --- API Key ---
try:
    GROQ_API_KEY = st.secrets["GROQ_API_KEY"]
except (KeyError, FileNotFoundError):
    st.warning("Kh√¥ng t√¨m th·∫•y Groq API Key trong Streamlit secrets. Vui l√≤ng nh·∫≠p th·ªß c√¥ng.")
    GROQ_API_KEY = st.text_input("Nh·∫≠p Groq API Key c·ªßa b·∫°n:", type="password")
    if not GROQ_API_KEY:
        st.stop()

# Kh·ªüi t·∫°o client Groq
client = OpenAI(
    api_key=GROQ_API_KEY,
    base_url="https://api.groq.com/openai/v1"
)

# --- G·ªçi API ---
def get_groq_response(input_text, prompt, model="llama3-8b-8192"):
    try:
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh, chuy√™n tr√≠ch xu·∫•t th√¥ng tin t·ª´ t√†i li·ªáu."},
                {"role": "user", "content": input_text},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói khi g·ªçi Groq API: {e}"

# --- ƒê·ªçc file .docx ---
def extract_text_from_docx(docx_bytes):
    try:
        doc = docx.Document(io.BytesIO(docx_bytes))
        full_text = []
        for para in doc.paragraphs:
            full_text.append(para.text)
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    full_text.append(cell.text)
        return '\n'.join(full_text)
    except Exception as e:
        st.error(f"L·ªói ƒë·ªçc file .docx: {e}")
        return None

# --- ƒê·ªçc file .pdf ---
def extract_text_from_pdf(file_bytes):
    try:
        pdf_document = fitz.open(stream=file_bytes, filetype="pdf")
        full_text = ""
        for page in pdf_document:
            full_text += page.get_text()
        pdf_document.close()
        return full_text
    except Exception as e:
        st.error(f"L·ªói ƒë·ªçc file .pdf: {e}")
        return None

# --- T·∫°o PDF tr√¨nh b√†y ƒë·∫πp ---
def export_to_pdf(text_output):
    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
        file_path = tmp_file.name

    doc = SimpleDocTemplate(file_path, pagesize=A4,
                            rightMargin=40, leftMargin=40,
                            topMargin=40, bottomMargin=30)

    styles = getSampleStyleSheet()
    styleN = styles["Normal"]
    styleH = ParagraphStyle(name='Heading1Center', parent=styles["Heading1"],
                            alignment=TA_CENTER, fontSize=16, spaceAfter=20)

    styleTitle = ParagraphStyle(name='TitleBold', parent=styleN,
                                fontName='Helvetica-Bold', spaceAfter=6)
    styleContent = ParagraphStyle(name='Content', parent=styleN,
                                  leftIndent=10, spaceAfter=12)

    elements = []

    # Ti√™u ƒë·ªÅ ch√≠nh
    elements.append(Paragraph("Th√¥ng tin tr√≠ch xu·∫•t t·ª´ ƒë·ªÅ c∆∞∆°ng h·ªçc ph·∫ßn", styleH))
    elements.append(Spacer(1, 10))

    # Tr√¨nh b√†y t·ª´ng d√≤ng nh∆∞ m·ª•c ti√™u - n·ªôi dung
    for line in text_output.strip().split("\n"):
        if ":" in line:
            title, content = line.split(":", 1)
            elements.append(Paragraph(f"{title.strip()}:", styleTitle))
            elements.append(Paragraph(content.strip(), styleContent))
        else:
            elements.append(Paragraph(line.strip(), styleContent))

    doc.build(elements)
    return file_path

# --- Giao di·ªán Streamlit ---
st.title("‚ú® Tr√≠ch xu·∫•t Th√¥ng tin t·ª´ T√†i li·ªáu v·ªõi Groq AI")
st.markdown("T·∫£i l√™n t·ªáp `.docx` ho·∫∑c `.pdf` ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

col1, col2 = st.columns([2, 3])

with col1:
    st.header("1. T·∫£i l√™n & T√πy ch·ªânh")

    uploaded_file = st.file_uploader("Ch·ªçn m·ªôt t·ªáp (.docx ho·∫∑c .pdf)", type=['docx', 'pdf'])

    prompt_default = """B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n nghi·ªáp trong vi·ªác tr√≠ch xu·∫•t th√¥ng tin.

T·ª´ n·ªôi dung ƒë·ªÅ c∆∞∆°ng h·ªçc ph·∫ßn d∆∞·ªõi ƒë√¢y, h√£y tr√≠ch xu·∫•t v√† tr√¨nh b√†y r√µ r√†ng theo ki·ªÉu ƒë√°nh s·ªë th·ª© t·ª± theo c√°c m·ª•c sau:
1. T√™n h·ªçc ph·∫ßn
2. M√£ h·ªçc ph·∫ßn (n·∫øu c√≥)
3. S·ªë t√≠n ch·ªâ
4. ƒêi·ªÅu ki·ªán ti√™n quy·∫øt (n·∫øu c√≥)
5. M·ª•c ti√™u h·ªçc ph·∫ßn
6. Chu·∫©n ƒë·∫ßu ra c·ªßa h·ªçc ph·∫ßn (CLO)
7. N·ªôi dung h·ªçc ph·∫ßn t√≥m t·∫Øt
8. T√†i li·ªáu tham kh·∫£o (ghi r√µ t√™n, t√°c gi·∫£, nƒÉm, NXB n·∫øu c√≥)

N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin n√†o, h√£y ghi l√† "Kh√¥ng t√¨m th·∫•y".
"""
    prompt_user = st.text_area("Ch·ªânh s·ª≠a prompt:", value=prompt_default, height=350)
    submit_button = st.button("üöÄ B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t")

with col2:
    st.header("2. K·∫øt qu·∫£ tr√≠ch xu·∫•t")
    result_container = st.container()
    result_container.info("K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã sau khi b·∫°n nh·∫•n 'B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t'.")

    if submit_button:
        if uploaded_file and prompt_user:
            with st.spinner("üîç ƒêang x·ª≠ l√Ω file..."):
                file_bytes = uploaded_file.getvalue()
                ext = uploaded_file.name.split('.')[-1].lower()
                raw_text = None

                if ext == "docx":
                    raw_text = extract_text_from_docx(file_bytes)
                elif ext == "pdf":
                    raw_text = extract_text_from_pdf(file_bytes)

                if raw_text and raw_text.strip():
                    st.success("‚úÖ Tr√≠ch xu·∫•t vƒÉn b·∫£n th√†nh c√¥ng.")
                    response = get_groq_response(raw_text, prompt_user)

                    result_container.text_area("Th√¥ng tin ƒë√£ tr√≠ch xu·∫•t:", value=response, height=550)

                    # T·∫°o PDF v√† cho ph√©p t·∫£i v·ªÅ
                    if st.button("üìÑ T·∫°o v√† T·∫£i file PDF"):
                        with st.spinner("üìù ƒêang t·∫°o PDF..."):
                            pdf_path = export_to_pdf(response)
                            with open(pdf_path, "rb") as f:
                                st.download_button(
                                    label="üì• B·∫•m ƒë·ªÉ t·∫£i PDF",
                                    data=f.read(),
                                    file_name="thong_tin_trich_xuat.pdf",
                                    mime="application/pdf"
                                )
                elif raw_text is not None:
                    result_container.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n·ªôi dung vƒÉn b·∫£n trong file.")
                else:
                    result_container.error("‚ùå L·ªói khi x·ª≠ l√Ω file.")
        elif not uploaded_file:
            st.warning("üìé Vui l√≤ng t·∫£i l√™n m·ªôt file.")
        else:
            st.warning("‚ö†Ô∏è Prompt kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
