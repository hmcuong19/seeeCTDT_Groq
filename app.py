import streamlit as st
import io
import docx
import fitz  # PyMuPDF
import openai
from openai import OpenAI
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# --- C·∫•u h√¨nh v√† Thi·∫øt l·∫≠p ---
st.set_page_config(page_title="Tr√≠ch xu·∫•t Th√¥ng tin Syllabus", page_icon="‚ú®", layout="wide")

# --- API Key cho Groq ---
try:
    GROQ_API_KEY = st.secrets["GROQ_API_KEY"]
except (KeyError, FileNotFoundError):
    st.warning("Kh√¥ng t√¨m th·∫•y Groq API Key trong Streamlit secrets. Vui l√≤ng nh·∫≠p th·ªß c√¥ng ƒë·ªÉ ch·∫°y ·ª©ng d·ª•ng.")
    GROQ_API_KEY = st.text_input("Nh·∫≠p Groq API Key c·ªßa b·∫°n:", type="password")
    if not GROQ_API_KEY:
        st.info("Vui l√≤ng cung c·∫•p API key ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
        st.stop()

# Kh·ªüi t·∫°o client t∆∞∆°ng th√≠ch Groq
client = OpenAI(
    api_key=GROQ_API_KEY,
    base_url="https://api.groq.com/openai/v1"
)

# --- H√†m g·ªçi Groq API ---
def get_groq_response(input_text, prompt, model="llama3-8b-8192"):
    try:
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh, chuy√™n tr√≠ch xu·∫•t th√¥ng tin t·ª´ t√†i li·ªáu."},
                {"role": "user", "content": input_text},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói khi g·ªçi Groq API: {e}"

# --- H√†m x·ª≠ l√Ω file ---
def extract_text_from_docx(docx_bytes):
    try:
        doc = docx.Document(io.BytesIO(docx_bytes))
        full_text = []
        for para in doc.paragraphs:
            full_text.append(para.text)
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    full_text.append(cell.text)
        return '\n'.join(full_text)
    except Exception as e:
        st.error(f"L·ªói ƒë·ªçc file .docx: {e}")
        return None

def extract_text_from_pdf(file_bytes):
    try:
        pdf_document = fitz.open(stream=file_bytes, filetype="pdf")
        full_text = ""
        for page_num in range(len(pdf_document)):
            page = pdf_document.load_page(page_num)
            full_text += page.get_text()
        pdf_document.close()
        return full_text
    except Exception as e:
        st.error(f"L·ªói ƒë·ªçc file .pdf: {e}")
        return None

# --- H√†m t·∫°o PDF t·ª´ n·ªôi dung tr√≠ch xu·∫•t ---
def generate_pdf(extracted_text):
    try:
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        
        # ƒêƒÉng k√Ω font h·ªó tr·ª£ ti·∫øng Vi·ªát
        pdfmetrics.registerFont(TTFont('DejaVuSans', 'DejaVuSans.ttf'))
        style = styles['Normal']
        style.fontName = 'DejaVuSans'
        style.fontSize = 12
        style.leading = 14
        
        # T√°ch vƒÉn b·∫£n th√†nh c√°c d√≤ng v√† t·∫°o danh s√°ch c√°c ph·∫ßn t·ª≠ Paragraph
        story = []
        for line in extracted_text.split('\n'):
            if line.strip():
                # ƒê·∫£m b·∫£o vƒÉn b·∫£n ƒë∆∞·ª£c m√£ h√≥a ƒë√∫ng
                story.append(Paragraph(line.encode('utf-8').decode('utf-8'), style))
                story.append(Spacer(1, 12))
        
        doc.build(story)
        buffer.seek(0)
        return buffer
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o PDF: {e}")
        return None

# --- Giao di·ªán Streamlit ---
st.title("‚ú® Tr√≠ch xu·∫•t Th√¥ng tin t·ª´ T√†i li·ªáu v·ªõi Groq AI")
st.markdown("T·∫£i l√™n t·ªáp `.docx` ho·∫∑c `.pdf` ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

col1, col2 = st.columns([2, 3])

with col1:
    st.header("1. T·∫£i l√™n & T√πy ch·ªânh")

    uploaded_file = st.file_uploader("Ch·ªçn m·ªôt t·ªáp (.docx ho·∫∑c .pdf)", type=['docx', 'pdf'])

    prompt_default = """B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n nghi·ªáp trong vi·ªác tr√≠ch xu·∫•t th√¥ng tin.

T·ª´ n·ªôi dung ƒë·ªÅ c∆∞∆°ng h·ªçc ph·∫ßn cung c·∫•p, h√£y tr√≠ch xu·∫•t v√† tr√¨nh b√†y r√µ r√†ng theo ki·ªÉu ƒë√°nh s·ªë th·ª© t·ª± v·ªõi c√°c m·ª•c sau:
T√™n h·ªçc ph·∫ßn
M√£ h·ªçc ph·∫ßn (n·∫øu c√≥)
S·ªë t√≠n ch·ªâ
ƒêi·ªÅu ki·ªán ti√™n quy·∫øt (n·∫øu c√≥)
M·ª•c ti√™u h·ªçc ph·∫ßn
Chu·∫©n ƒë·∫ßu ra c·ªßa h·ªçc ph·∫ßn (CLO)
N·ªôi dung h·ªçc ph·∫ßn t√≥m t·∫Øt
T√†i li·ªáu tham kh·∫£o (ghi r√µ t√™n, t√°c gi·∫£, nƒÉm, NXB n·∫øu c√≥)

N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin n√†o, h√£y ghi l√† "Kh√¥ng t√¨m th·∫•y".
"""
    prompt_user = st.text_area("Ch·ªânh s·ª≠a prompt:", value=prompt_default, height=350)
    submit_button = st.button("üöÄ B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t")

with col2:
    st.header("2. K·∫øt qu·∫£ tr√≠ch xu·∫•t")
    result_container = st.container()
    result_container.info("K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y sau khi b·∫°n nh·∫•n n√∫t 'B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t'.")

    if submit_button:
        if uploaded_file and prompt_user:
            with st.spinner("ƒêang x·ª≠ l√Ω file... Vui l√≤ng ch·ªù! ü§ñ"):
                file_bytes = uploaded_file.getvalue()
                file_extension = uploaded_file.name.split('.')[-1].lower()
                raw_text = None

                st.info(f"ƒêang ƒë·ªçc file {file_extension}...")
                if file_extension == "docx":
                    raw_text = extract_text_from_docx(file_bytes)
                elif file_extension == "pdf":
                    raw_text = extract_text_from_pdf(file_bytes)

                if raw_text and raw_text.strip():
                    st.success("ƒê·ªçc file th√†nh c√¥ng!")
                    st.info("ƒêang g·ª≠i n·ªôi dung ƒë·∫øn m√¥ h√¨nh AI...")
                    response = get_groq_response(raw_text, prompt_user)
                    result_container.text_area("Th√¥ng tin ƒë√£ tr√≠ch xu·∫•t:", value=response, height=550)
                    
                    # T·∫°o v√† cung c·∫•p n√∫t t·∫£i PDF
                    pdf_buffer = generate_pdf(response)
                    if pdf_buffer:
                        result_container.download_button(
                            label="üìÑ T·∫£i xu·ªëng k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng PDF",
                            data=pdf_buffer,
                            file_name="extracted_information.pdf",
                            mime="application/pdf"
                        )
                    else:
                        result_container.error("Kh√¥ng th·ªÉ t·∫°o file PDF. Vui l√≤ng th·ª≠ l·∫°i.")
                elif raw_text is not None:
                    result_container.warning("Kh√¥ng t√¨m th·∫•y n·ªôi dung vƒÉn b·∫£n n√†o trong file.")
                else:
                    result_container.error("L·ªói khi tr√≠ch xu·∫•t n·ªôi dung. Vui l√≤ng th·ª≠ l·∫°i v·ªõi file kh√°c.")
        elif not uploaded_file:
            st.warning("Vui l√≤ng t·∫£i l√™n m·ªôt file.")
        else:
            st.warning("Prompt kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
